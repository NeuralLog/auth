openapi: 3.0.0
info:
  title: NeuralLog Auth API
  description: API for authentication and authorization in NeuralLog
  version: 1.0.0
  contact:
    name: NeuralLog Team
servers:
  - url: /api
    description: Auth API
paths:
  /api-keys:
    get:
      tags:
        - API Keys
      summary: Get API keys
      description: Get all API keys for the current user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of API keys
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeysList'
        '401':
          description: Unauthorized
    post:
      tags:
        - API Keys
      summary: Create API key
      description: Create a new API key
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApiKeyRequest'
      responses:
        '201':
          description: API key created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: API key ID
                  key:
                    type: string
                    description: API key (only returned once)
                required:
                  - id
                  - key
        '401':
          description: Unauthorized
  /api-keys/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        description: API key ID
    get:
      tags:
        - API Keys
      summary: Get API key
      description: Get an API key by ID
      security:
        - bearerAuth: []
      responses:
        '200':
          description: API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
        '401':
          description: Unauthorized
        '404':
          description: API key not found
    delete:
      tags:
        - API Keys
      summary: Revoke API key
      description: Revoke an API key
      security:
        - bearerAuth: []
      responses:
        '204':
          description: API key revoked
        '401':
          description: Unauthorized
        '404':
          description: API key not found
  /api-keys/challenge:
    post:
      tags:
        - API Keys
      summary: Get API key challenge
      description: Get a challenge for API key authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                apiKey:
                  type: string
                  description: API key
              required:
                - apiKey
      responses:
        '200':
          description: API key challenge
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeyChallenge'
        '401':
          description: Invalid API key
  /api-keys/verify-challenge:
    post:
      tags:
        - API Keys
      summary: Verify API key challenge
      description: Verify a challenge response for API key authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                apiKey:
                  type: string
                  description: API key
                challenge:
                  type: string
                  description: Challenge
                response:
                  type: string
                  description: Challenge response
              required:
                - apiKey
                - challenge
                - response
      responses:
        '200':
          description: Challenge verification result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeyChallengeVerification'
        '401':
          description: Invalid challenge response
  /auth/login:
    post:
      tags:
        - Auth
      summary: Login with email and password
      description: Authenticate a user with email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: User email
                password:
                  type: string
                  format: password
                  description: User password
              required:
                - email
                - password
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message
                  code:
                    type: string
                    description: Error code
  /auth/logout:
    post:
      tags:
        - Auth
      summary: Logout
      description: Logout the current user
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Successfully logged out
        '401':
          description: Unauthorized
  /auth/validate-token:
    post:
      tags:
        - Auth
      summary: Validate token
      description: Validate an authentication token
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Token validation result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenValidationResult'
        '401':
          description: Invalid token
  /auth/exchange-token:
    post:
      tags:
        - Auth
      summary: Exchange token for resource token
      description: Exchange an authentication token for a resource-specific token
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                resource:
                  type: string
                  description: Resource to access
                tenantId:
                  type: string
                  description: Tenant ID
              required:
                - resource
                - tenantId
      responses:
        '200':
          description: Token exchange result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenExchangeResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  /auth/verify-resource-token:
    post:
      tags:
        - Auth
      summary: Verify resource token
      description: Verify a resource-specific token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: Resource token
                resource:
                  type: string
                  description: Resource to access
              required:
                - token
                - resource
      responses:
        '200':
          description: Resource token verification result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceTokenVerificationResult'
        '401':
          description: Invalid token
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    AdminShare:
      type: object
      properties:
        id:
          type: string
          description: Admin share ID
        user_id:
          type: string
          description: User ID
        encrypted_share:
          type: string
          description: Encrypted share
        created_at:
          type: string
          format: date-time
          description: Creation date
      required:
        - id
        - user_id
        - encrypted_share
        - created_at
    AdminShares:
      type: object
      properties:
        shares:
          type: array
          items:
            $ref: '#/components/schemas/AdminShare'
          description: Admin shares
      required:
        - shares
    AdminShareRequest:
      type: object
      properties:
        candidate_id:
          type: string
          description: Candidate user ID
        encrypted_share:
          type: string
          description: Encrypted share data
        public_key:
          type: string
          description: Public key used for encryption
        threshold:
          type: integer
          description: Threshold (number of shares required)
      required:
        - candidate_id
        - encrypted_share
        - public_key
        - threshold
    AdminPromotionRequest:
      type: object
      properties:
        id:
          type: string
          description: Request ID
        candidate_id:
          type: string
          description: Candidate user ID
        candidate_name:
          type: string
          description: Candidate username
        requester_id:
          type: string
          description: Requester user ID
        requester_name:
          type: string
          description: Requester username
        timestamp:
          type: string
          format: date-time
          description: Request timestamp
        status:
          type: string
          enum:
            - pending
            - approved
            - rejected
          description: Request status
        threshold:
          type: integer
          description: Threshold (number of approvals required)
        approvals:
          type: integer
          description: Number of approvals received
      required:
        - id
        - candidate_id
        - candidate_name
        - requester_id
        - requester_name
        - timestamp
        - status
        - threshold
        - approvals
    PublicKey:
      type: object
      properties:
        userId:
          type: string
          description: User ID
        publicKey:
          type: string
          description: Public key data
        purpose:
          type: string
          description: Purpose of the public key (e.g., 'admin-promotion')
        tenantId:
          type: string
          description: Tenant ID
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Update timestamp
      required:
        - userId
        - publicKey
        - purpose
        - tenantId
        - createdAt
        - updatedAt
    SerializedSecretShare:
      type: object
      properties:
        x:
          type: integer
          description: The x-coordinate of the share
        'y':
          type: string
          description: The y-coordinate of the share (the actual share value) as a Base64 string
      required:
        - x
        - 'y'
    ApiKey:
      type: object
      properties:
        id:
          type: string
          description: API key ID
        userId:
          type: string
          description: User ID
        tenantId:
          type: string
          description: Tenant ID
        name:
          type: string
          description: API key name
        scopes:
          type: array
          items:
            type: string
          description: API key scopes
        verificationHash:
          type: string
          description: Verification hash for the API key
        createdAt:
          type: string
          format: date-time
          description: When the API key was created
        expiresAt:
          type: string
          format: date-time
          description: When the API key expires
        revoked:
          type: boolean
          description: Whether the API key is revoked
        revokedAt:
          type: string
          format: date-time
          description: When the API key was revoked
        lastUsedAt:
          type: string
          format: date-time
          description: Last used timestamp
      required:
        - id
        - userId
        - tenantId
        - name
        - scopes
        - verificationHash
        - createdAt
        - expiresAt
        - revoked
    ApiKeyChallenge:
      type: object
      properties:
        challenge:
          type: string
          description: Challenge string
        expiresIn:
          type: integer
          description: Expiration time in seconds
      required:
        - challenge
        - expiresIn
    ApiKeyChallengeVerification:
      type: object
      properties:
        valid:
          type: boolean
          description: Whether the challenge response is valid
        userId:
          type: string
          description: User ID
        tenantId:
          type: string
          description: Tenant ID
        scopes:
          type: array
          items:
            type: string
          description: Scopes
      required:
        - valid
    ApiKeyInfo:
      type: object
      properties:
        id:
          type: string
          description: API key ID
        name:
          type: string
          description: API key name
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        expires_at:
          type: string
          format: date-time
          description: Expiration timestamp (if applicable)
        revoked:
          type: boolean
          description: Whether the API key is revoked
      required:
        - id
        - name
        - created_at
        - revoked
    ApiKeyPermission:
      type: object
      properties:
        action:
          type: string
          description: Action (e.g., 'read', 'write')
        resource:
          type: string
          description: Resource (e.g., 'logs', 'logs/my-log')
      required:
        - action
        - resource
    CreateApiKeyRequest:
      type: object
      properties:
        name:
          type: string
          description: API key name
        expires_in:
          type: integer
          description: Expiration time in days (optional)
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/ApiKeyPermission'
          description: Permissions for this API key
      required:
        - name
    KeysList:
      type: object
      properties:
        api_keys:
          type: array
          items:
            $ref: '#/components/schemas/ApiKey'
          description: API keys
      required:
        - api_keys
    Login:
      type: object
      properties:
        token:
          type: string
          description: Authentication token
        user_id:
          type: string
          description: User ID
        tenant_id:
          type: string
          description: Tenant ID
        user:
          $ref: '#/components/schemas/UserProfile'
          description: User profile
      required:
        - token
        - user_id
        - tenant_id
    PermissionCheck:
      type: object
      properties:
        allowed:
          type: boolean
          description: Whether the user has permission
      required:
        - allowed
    TokenValidationResult:
      type: object
      properties:
        valid:
          type: boolean
          description: Whether the token is valid
        user:
          $ref: '#/components/schemas/UserProfile'
          description: User information (if token is valid)
      required:
        - valid
    TokenExchangeResult:
      type: object
      properties:
        token:
          type: string
          description: The exchanged token
      required:
        - token
    ResourceTokenVerificationResult:
      type: object
      properties:
        valid:
          type: boolean
          description: Whether the token is valid
        userId:
          type: string
          description: User ID
        tenantId:
          type: string
          description: Tenant ID
        resource:
          type: string
          description: Resource
      required:
        - valid
        - userId
        - tenantId
        - resource
    KEKBlob:
      type: object
      properties:
        userId:
          type: string
          description: User ID
        kekVersionId:
          type: string
          description: KEK version ID
        encryptedBlob:
          type: string
          description: Encrypted blob
        tenantId:
          type: string
          description: Tenant ID
        createdAt:
          type: string
          format: date-time
          description: Creation date
        updatedAt:
          type: string
          format: date-time
          description: Update date
      required:
        - userId
        - kekVersionId
        - encryptedBlob
        - tenantId
        - createdAt
        - updatedAt
    KEKBlobs:
      type: object
      properties:
        blobs:
          type: array
          items:
            $ref: '#/components/schemas/KEKBlob'
          description: KEK blobs
      required:
        - blobs
    KEKVersion:
      type: object
      properties:
        id:
          type: string
          description: KEK version ID
        createdAt:
          type: string
          format: date-time
          description: Creation date
        createdBy:
          type: string
          description: Created by user ID
        status:
          type: string
          enum:
            - active
            - decrypt-only
            - deprecated
          description: Status
        reason:
          type: string
          description: Reason for creation
        tenantId:
          type: string
          description: Tenant ID
      required:
        - id
        - createdAt
        - createdBy
        - status
        - reason
        - tenantId
    KEKVersions:
      type: object
      properties:
        versions:
          type: array
          items:
            $ref: '#/components/schemas/KEKVersion'
          description: KEK versions
      required:
        - versions
    EncryptedKEK:
      type: object
      properties:
        encrypted:
          type: boolean
          description: Whether the KEK is encrypted
        algorithm:
          type: string
          description: Encryption algorithm
        iv:
          type: string
          description: Initialization vector
        data:
          type: string
          description: Encrypted KEK data
        version:
          type: string
          description: KEK version
      required:
        - encrypted
        - algorithm
        - iv
        - data
    Tenant:
      type: object
      properties:
        tenantId:
          type: string
          description: Tenant ID
        adminUserId:
          type: string
          description: Admin user ID
      required:
        - tenantId
        - adminUserId
    Role:
      type: object
      properties:
        id:
          type: string
          description: Role ID
        name:
          type: string
          description: Role name
        description:
          type: string
          description: Role description
        permissions:
          type: array
          items:
            type: string
          description: Role permissions
        inherits:
          type: array
          items:
            type: string
          description: Roles this role inherits from
        tenantId:
          type: string
          description: Tenant ID
      required:
        - id
        - name
        - permissions
        - tenantId
    User:
      type: object
      properties:
        id:
          type: string
          description: User ID
        email:
          type: string
          format: email
          description: User email
        name:
          type: string
          description: User name
        tenantId:
          type: string
          description: Tenant ID
        isAdmin:
          type: boolean
          description: Whether the user is an admin
        createdAt:
          type: string
          format: date-time
          description: Creation date
      required:
        - id
        - email
        - tenantId
        - createdAt
    UserProfile:
      type: object
      properties:
        id:
          type: string
          description: User ID
        email:
          type: string
          format: email
          description: Email
        tenantId:
          type: string
          description: Tenant ID
        name:
          type: string
          description: Name
        username:
          type: string
          description: Username (optional)
        first_name:
          type: string
          description: First name (optional)
        last_name:
          type: string
          description: Last name (optional)
        roles:
          type: array
          items:
            type: string
          description: User roles (optional)
      required:
        - id
        - email
        - tenantId
security:
  - bearerAuth: []
tags:
  - name: Auth
    description: Authentication operations
  - name: Users
    description: User management operations
  - name: API Keys
    description: API key management operations
  - name: Tenants
    description: Tenant management operations
  - name: Roles
    description: Role management operations
  - name: KEK
    description: Key Encryption Key operations
